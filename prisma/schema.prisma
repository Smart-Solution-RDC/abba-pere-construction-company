generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  client
  agent
}

enum Poste {
  directeur
  secretaire
  caissier
  gerant
}

enum Sexe {
  homme
  femme
}

enum Ville {
  Bandundu
  Kindu
  Butembo
  Kinshasa
  Mbujimayi
  Lubumbashi
  Kananga
  Kisangani
  Goma
  Bukavu
  Tshikapa
  Kolwezi
  Likasi
  Kikwit
  Uvira
  Bunia
  Kalemie
  Mbandaka
  Matadi
}

enum MoyenPaiment {
  cache
  banque
  mobile
  cheque
  autres
}

enum StatutAchat {
  EN_COURS
  TERMINE
  ANNULE
}

// This is the main model for the application

model Entreprise {
  id           Int     @id @default(autoincrement())
  nom          String  @unique
  encronyme    String  @unique
  code_postale String  @unique
  adresse      String
  tel          String  @unique
  site         String?
  email        String  @unique
  description  String?
  logo         String?
  Vente        Vente[]
}

model Utilisateur {
  id          String    @id
  email       String    @unique
  nom         String
  postnom     String
  nom_complet String?
  sexe        Sexe?
  role        Role      @default(client)
  poste       Poste?
  picture     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Adresse     Adresse[]
  Contact     Contact[]
  Produit     Produit[]
  Vente       Vente[]
  Achat       Achat[]
  Teneur      Teneur[]
  Devise      Devise[]
  Panier      Panier[]
}

// model Poste {
//   id               Int         @id @default(autoincrement())
//   titre            String      @db.VarChar(255)
//   utilisateurId    String
//   utilisateur      Utilisateur @relation(fields: [utilisateurId], references: [id])
//   createdAt        DateTime    @default(now())
//   updatedAt        DateTime    @updatedAt
// }

model Adresse {
  id            Int          @id @default(autoincrement())
  ville         String
  commune       String // Delete this attr.
  adresse       String
  utilisateurId String?
  utilisateur   Utilisateur? @relation(fields: [utilisateurId], references: [id])
  fournisseurId Int?
  fournisseur   Fournisseur? @relation(fields: [fournisseurId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Contact {
  id            Int          @id @default(autoincrement())
  tel           String       @unique
  utilisateurId String?
  utilisateur   Utilisateur? @relation(fields: [utilisateurId], references: [id])
  fournisseurId Int?
  fournisseur   Fournisseur? @relation(fields: [fournisseurId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Fournisseur {
  id          Int       @id @default(autoincrement())
  nom         String
  email       String    @unique
  code_postal String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Vente       Vente[]
  Achat       Achat[]
  Adresse     Adresse[]
  Contact     Contact[]
}

model Teneur {
  id            Int         @id @default(autoincrement())
  valeur        Float       @unique
  utilisateurId String
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Produit       Produit[]
}

model Devise {
  id            Int         @id @default(autoincrement())
  nom           String      @unique
  code          String      @unique @db.VarChar(3)
  symbole       String      @db.VarChar(5)
  utilisateurId String
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Produit       Produit[]
  Paiement      Paiement[]
}

model Produit {
  id            Int           @id @default(autoincrement())
  designation   String
  prix          Float
  qtte          Int           @default(0)
  description   String
  deviseId      Int
  devise        Devise        @relation(fields: [deviseId], references: [id])
  teneurId      Int
  teneur        Teneur        @relation(fields: [teneurId], references: [id])
  utilisateurId String
  utilisateur   Utilisateur   @relation(fields: [utilisateurId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  DetailVente   DetailVente[]
  DetailAchat   DetailAchat[]
}

// Models de la Vente...

model Paiement {
  id             Int          @id @default(autoincrement())
  montant        Float
  moyen_paiement MoyenPaiment
  deviseId       Int
  devise         Devise       @relation(fields: [deviseId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Achat          Achat[]
  Vente          Vente[]
}

model Vente {
  id            Int          @id @default(autoincrement())
  statut        String
  total_ttc     Float
  total_ht      Float
  remise        Float
  detailVenteId Int
  entrepriseId  Int
  clientId      String
  agentId       String
  fournisseurId Int?
  paiementId    Int?
  detailvente   DetailVente  @relation(fields: [detailVenteId], references: [id])
  entreprise    Entreprise   @relation(fields: [entrepriseId], references: [id])
  utilisateur   Utilisateur  @relation(fields: [clientId], references: [id])
  fournisseur   Fournisseur? @relation(fields: [fournisseurId], references: [id])
  paiement      Paiement?    @relation(fields: [paiementId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Panier {
  id            Int           @id @default(autoincrement())
  utilisateurId String
  utilisateur   Utilisateur   @relation(fields: [utilisateurId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  DetailAchat   DetailAchat[]
  Achat         Achat[]
}

model DetailVente {
  id           Int      @id @default(autoincrement())
  produitId    Int
  qtte         Int
  prixUnitaire Float
  prixTotal    Float
  produit      Produit  @relation(fields: [produitId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Vente        Vente[]
}

model DetailAchat {
  id           Int      @id @default(autoincrement())
  produitId    Int
  qtte         Int
  prixUnitaire Float
  prixTotal    Float
  produit      Produit  @relation(fields: [produitId], references: [id])
  panierId     Int
  panier       Panier   @relation(fields: [panierId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Achat {
  id              Int         @id @default(autoincrement())
  statut          StatutAchat @default(EN_COURS)
  panierId        Int
  fournisseurId   Int
  enregisterParId String
  paiementId      Int
  panier          Panier      @relation(fields: [panierId], references: [id])
  fournisseur     Fournisseur @relation(fields: [fournisseurId], references: [id])
  utilisateur     Utilisateur @relation(fields: [enregisterParId], references: [id])
  paiement        Paiement    @relation(fields: [paiementId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}
