generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teneur {
  id        Int       @id @default(autoincrement())
  valeur    Float     @unique
  agentId   Int
  agents    Agent     @relation(fields: [agentId], references: [id])
  produits  Produit[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Devise {
  id           Int            @id @default(autoincrement())
  nom          String         @unique
  code         String         @unique @db.VarChar(5)
  symbole      String         @db.VarChar(5)
  tauxDEchange Int
  agentId      Int
  agent        Agent          @relation(fields: [agentId], references: [id])
  produits     Produit[]
  paiements    Paiement[]
  caisses      Caisse[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  DetailPanier DetailPanier[]
}

enum Role {
  ADMIN
  AGENT
}

model Entreprise {
  id             Int             @id @default(autoincrement())
  nom            String          @unique
  email          String          @unique
  encronyme      String          @unique
  codePostale    String          @unique
  site           String?
  description    String?
  logo           String?
  clotureCaisses ClotureCaisse[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Adresse        Adresse[]
  Contact        Contact[]
}

enum Sexe {
  HOMME
  FEMME
}

enum Poste {
  DIRECTEUR
  SECRETAIRE
  CAISSIER
  GERANT
}

model Agent {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  nom              String
  postnom          String?
  nom_complet      String?
  sexe             Sexe?
  role             Role              @default(AGENT)
  poste            Poste?
  picture          String?
  adresses         Adresse[]
  contacts         Contact[]
  produits         Produit[]
  ventes           Vente[]
  achats           Achat[]
  teneurs          Teneur[]
  devises          Devise[]
  paniers          Panier[]
  caisses          Caisse[]
  mouvementCaisses MouvementCaisse[]
  clotureCaisses   ClotureCaisse[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Fournisseur      Fournisseur[]
}

model Client {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  nom          String
  postnom      String?
  nom_complet  String?
  sexe         Sexe?
  picture      String?
  adresses     Adresse[]
  contacts     Contact[]
  ventes       Vente[]
  achats       Achat[]
  paniers      Panier[]
  reservations Reservation[]
  commandes    Commande[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Adresse {
  id            Int           @id @default(autoincrement())
  ville         String?
  adresse       String
  isActive      Boolean       @default(true)
  agentId       Int?
  fournisseurId Int?
  clientId      Int?
  entrepriseId  Int?
  agent         Agent?        @relation(fields: [agentId], references: [id])
  entreprise    Entreprise?   @relation(fields: [entrepriseId], references: [id])
  fournisseur   Fournisseur?  @relation(fields: [fournisseurId], references: [id])
  client        Client?       @relation(fields: [clientId], references: [id])
  reservations  Reservation[]
  commandes     Commande[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Contact {
  id            Int           @id @default(autoincrement())
  tel           String        @unique
  isActive      Boolean       @default(true)
  agentId       Int?
  fournisseurId Int?
  clientId      Int?
  entrepriseId  Int?
  entreprise    Entreprise?   @relation(fields: [entrepriseId], references: [id])
  client        Client?       @relation(fields: [clientId], references: [id])
  agent         Agent?        @relation(fields: [agentId], references: [id])
  fournisseur   Fournisseur?  @relation(fields: [fournisseurId], references: [id])
  reservations  Reservation[]
  commandes     Commande[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Fournisseur {
  id           Int           @id @default(autoincrement())
  nom          String        @unique
  email        String        @unique
  codePostale  String?
  agentId      Int
  agent        Agent         @relation(fields: [agentId], references: [id])
  ventes       Vente[]
  achats       Achat[]
  adresses     Adresse[]
  contacts     Contact[]
  reservations Reservation[]
  commandes    Commande[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Produit {
  id             Int            @id @default(autoincrement())
  designation    String
  prixUnitaire   Float
  qtteDisponible Int            @default(0)
  description    String?
  deviseId       Int
  teneurId       Int
  agentId        Int
  detailsPaniers DetailPanier[]
  agent          Agent          @relation(fields: [agentId], references: [id])
  devise         Devise         @relation(fields: [deviseId], references: [id])
  teneur         Teneur         @relation(fields: [teneurId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

enum ModePaiment {
  CACHE
  BANQUE
  MOBILE
}

model Paiement {
  id           Int         @id @default(autoincrement())
  montant      Float
  modePaiement ModePaiment
  deviseId     Int
  caisseId     Int
  caisse       Caisse      @relation(fields: [caisseId], references: [id])
  devise       Devise      @relation(fields: [deviseId], references: [id])
  achats       Achat[]
  commandes    Commande[]
  ventes       Vente[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Caisse {
  id               Int               @id @default(autoincrement())
  nom              String            @unique @db.VarChar(100)
  description      String?           @db.Text
  soldeActuel      Float?            @default(0)
  deviseId         Int
  agentId          Int
  statut           StatutCaisse      @default(OUVERTE)
  devise           Devise            @relation(fields: [deviseId], references: [id])
  agent            Agent             @relation(fields: [agentId], references: [id])
  mouvementCaisses MouvementCaisse[]
  paiements        Paiement[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

enum StatutVente {
  EN_ATTENTE
  CONFIRME
  REMBOURSE
  ANNULE
}

enum TypeClient {
  ORDINAIRE
  NOUVEAU
  CLIENT
  FOURNISSEUR
  AGENT
}

model Vente {
  id            Int          @id @default(autoincrement())
  statut        StatutVente  @default(CONFIRME)
  totalTTC      Float
  totalHT       Float
  typeAcheteur  TypeClient
  clientId      Int?
  agentId       Int
  fournisseurId Int?
  paiementId    Int
  panierId      Int
  creerPar      String?
  paiement      Paiement?    @relation(fields: [paiementId], references: [id])
  panier        Panier       @relation(fields: [panierId], references: [id])
  agent         Agent        @relation(fields: [agentId], references: [id])
  fournisseur   Fournisseur? @relation(fields: [fournisseurId], references: [id])
  client        Client?      @relation(fields: [clientId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum statutPanier {
  EN_COURS
  VALIDE
  ANNULE
}

model Panier {
  id            Int            @id @default(autoincrement())
  agentId       Int?
  clientId      Int?
  statut        statutPanier   @default(EN_COURS)
  agent         Agent?         @relation(fields: [agentId], references: [id])
  client        Client?        @relation(fields: [clientId], references: [id])
  detailPaniers DetailPanier[]
  achats        Achat[]
  ventes        Vente[]
  reservations  Reservation[]
  commandes     Commande[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model DetailPanier {
  id           Int         @id @default(autoincrement())
  produitId    Int
  qtte         Int
  modePaiement ModePaiment
  prixUnitaire Float
  prixTotalHT  Float
  prixTotalTTC Float
  panierId     Int
  deviseId     Int
  devise       Devise      @relation(fields: [deviseId], references: [id])
  produit      Produit     @relation(fields: [produitId], references: [id])
  panier       Panier      @relation(fields: [panierId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum StatutAchat {
  EN_COURS
  TERMINE
  ANNULE
}

model Achat {
  id            Int         @id @default(autoincrement())
  statut        StatutAchat @default(EN_COURS)
  panierId      Int
  fournisseurId Int
  agentId       Int
  paiementId    Int
  clientId      Int?
  panier        Panier      @relation(fields: [panierId], references: [id])
  fournisseur   Fournisseur @relation(fields: [fournisseurId], references: [id])
  agent         Agent       @relation(fields: [agentId], references: [id])
  paiement      Paiement    @relation(fields: [paiementId], references: [id])
  Client        Client?     @relation(fields: [clientId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum StatutReservation {
  EN_ATTENTE
  ANNULEE
  REJETEE
  CONVERTIE
}

model Reservation {
  id                     Int               @id @default(autoincrement())
  dateLivraisonSouhaitee DateTime
  adresseLivraison       String?           @db.VarChar(255)
  statut                 StatutReservation @default(EN_ATTENTE)
  notes                  String?           @db.Text
  typeClient             TypeClient        @default(ORDINAIRE)
  clientId               Int?
  panierId               Int
  nom                    String?
  tel                    String?
  adresseId              Int?
  contactId              Int?
  enregistrerParId       Int?
  fournisseurId          Int?
  panier                 Panier            @relation(fields: [panierId], references: [id])
  fournisseur            Fournisseur?      @relation(fields: [fournisseurId], references: [id])
  adresse                Adresse?          @relation(fields: [adresseId], references: [id])
  contact                Contact?          @relation(fields: [contactId], references: [id])
  Client                 Client?           @relation(fields: [clientId], references: [id])
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

enum StatutCommande {
  EN_ATTENTE_PAIEMENT
  LIVREE
  ANNULEE
}

model Commande {
  id                     Int            @id @default(autoincrement())
  panierId               Int
  clientId               Int?
  nom                    String?
  tel                    String?
  type_client            TypeClient     @default(ORDINAIRE)
  paiementId             Int
  adresseId              Int?
  contactId              Int?
  fournisseurId          Int?
  notes                  String?        @db.Text
  dateLivraisonEffective DateTime?
  adresseLivraison       String?        @db.VarChar(255)
  enregistrerParId       Int?
  statut                 StatutCommande @default(EN_ATTENTE_PAIEMENT) // Statut de la commande
  panier                 Panier         @relation(fields: [panierId], references: [id])
  paiement               Paiement       @relation(fields: [paiementId], references: [id])
  fournisseur            Fournisseur?   @relation(fields: [fournisseurId], references: [id])
  adresse                Adresse?       @relation(fields: [adresseId], references: [id])
  contact                Contact?       @relation(fields: [contactId], references: [id])
  Client                 Client?        @relation(fields: [clientId], references: [id])
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
}

model ClotureCaisse {
  id           Int         @id @default(autoincrement())
  dateCloture  DateTime    @unique @default(now())
  agentId      Int
  entrepriseId Int?
  updatedAt    DateTime    @updatedAt
  agent        Agent       @relation(fields: [agentId], references: [id])
  entreprise   Entreprise? @relation(fields: [entrepriseId], references: [id])
  notes        String?     @db.Text
  createdAt    DateTime    @default(now())
}

enum TypeMouvementCaisse {
  ENTREE
  SORTIE
}

enum StatutCaisse {
  OUVERTE
  FERMEE
}

// Add modePaiement as a table
enum CategorieMouvement {
  ACHAT
  VENTE
  COMMANDE
  FOURNITUR
  SALAIRE
  LOYER
  EMPRUNT
  TAXE
  AUTRES
}

// Or change to charge table...
model MouvementCaisse {
  id               Int                 @id @default(autoincrement())
  caisseId         Int
  referenceExterne String?             @unique @db.VarChar(100) // Référence à une commande, une vente, une facture, etc.
  type_mouvement   TypeMouvementCaisse @default(SORTIE)
  categorie        CategorieMouvement  @default(VENTE)
  moyen_paiement   ModePaiment
  montant          Float
  description      String?             @db.Text
  agentId          Int
  caisse           Caisse              @relation(fields: [caisseId], references: [id])
  agent            Agent               @relation(fields: [agentId], references: [id])
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

// La facturation
