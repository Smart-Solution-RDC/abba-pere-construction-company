
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.EntrepriseScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  encronyme: 'encronyme',
  code_postale: 'code_postale',
  adresse: 'adresse',
  tel: 'tel',
  site: 'site',
  email: 'email',
  description: 'description',
  logo: 'logo'
};

exports.Prisma.UtilisateurScalarFieldEnum = {
  id: 'id',
  email: 'email',
  nom: 'nom',
  postnom: 'postnom',
  nom_complet: 'nom_complet',
  sexe: 'sexe',
  role: 'role',
  poste: 'poste',
  picture: 'picture',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdresseScalarFieldEnum = {
  id: 'id',
  ville: 'ville',
  commune: 'commune',
  adresse: 'adresse',
  utilisateurId: 'utilisateurId',
  fournisseurId: 'fournisseurId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  tel: 'tel',
  utilisateurId: 'utilisateurId',
  fournisseurId: 'fournisseurId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FournisseurScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  email: 'email',
  code_postal: 'code_postal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeneurScalarFieldEnum = {
  id: 'id',
  valeur: 'valeur',
  utilisateurId: 'utilisateurId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeviseScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  code: 'code',
  symbole: 'symbole',
  utilisateurId: 'utilisateurId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProduitScalarFieldEnum = {
  id: 'id',
  designation: 'designation',
  prix: 'prix',
  qtte: 'qtte',
  description: 'description',
  deviseId: 'deviseId',
  teneurId: 'teneurId',
  utilisateurId: 'utilisateurId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaiementScalarFieldEnum = {
  id: 'id',
  montant: 'montant',
  moyen_paiement: 'moyen_paiement',
  deviseId: 'deviseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VenteScalarFieldEnum = {
  id: 'id',
  statut: 'statut',
  total_ttc: 'total_ttc',
  total_ht: 'total_ht',
  type_acheteur: 'type_acheteur',
  clientId: 'clientId',
  enregistrerParId: 'enregistrerParId',
  fournisseurId: 'fournisseurId',
  agentId: 'agentId',
  paiementId: 'paiementId',
  panierId: 'panierId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PanierScalarFieldEnum = {
  id: 'id',
  utilisateurId: 'utilisateurId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DetailPanierScalarFieldEnum = {
  id: 'id',
  produitId: 'produitId',
  qtte: 'qtte',
  prixUnitaire: 'prixUnitaire',
  prixTotal: 'prixTotal',
  panierId: 'panierId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AchatScalarFieldEnum = {
  id: 'id',
  statut: 'statut',
  panierId: 'panierId',
  fournisseurId: 'fournisseurId',
  enregistrerParId: 'enregistrerParId',
  paiementId: 'paiementId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReservationScalarFieldEnum = {
  id: 'id',
  dateLivraisonSouhaitee: 'dateLivraisonSouhaitee',
  adresseLivraison: 'adresseLivraison',
  statut: 'statut',
  notes: 'notes',
  type_client: 'type_client',
  clientId: 'clientId',
  panierId: 'panierId',
  nom: 'nom',
  tel: 'tel',
  adresseId: 'adresseId',
  contactId: 'contactId',
  enregistrerParId: 'enregistrerParId',
  fournisseurId: 'fournisseurId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommandeScalarFieldEnum = {
  id: 'id',
  panierId: 'panierId',
  clientId: 'clientId',
  nom: 'nom',
  tel: 'tel',
  type_client: 'type_client',
  paiementId: 'paiementId',
  adresseId: 'adresseId',
  contactId: 'contactId',
  fournisseurId: 'fournisseurId',
  notes: 'notes',
  dateLivraisonEffective: 'dateLivraisonEffective',
  adresseLivraison: 'adresseLivraison',
  enregistrerParId: 'enregistrerParId',
  statut: 'statut',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CaisseScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  description: 'description',
  soldeInitial: 'soldeInitial',
  soldeActuel: 'soldeActuel',
  deviseId: 'deviseId',
  creeParId: 'creeParId',
  statut: 'statut',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MouvementCaisseScalarFieldEnum = {
  id: 'id',
  caisseId: 'caisseId',
  type_mouvement: 'type_mouvement',
  categorie: 'categorie',
  montant: 'montant',
  description: 'description',
  enregistrerParId: 'enregistrerParId',
  referenceExterne: 'referenceExterne',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClotureCaisseScalarFieldEnum = {
  id: 'id',
  caisseId: 'caisseId',
  dateCloture: 'dateCloture',
  utilisateurClotureId: 'utilisateurClotureId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Sexe = exports.$Enums.Sexe = {
  homme: 'homme',
  femme: 'femme'
};

exports.Role = exports.$Enums.Role = {
  admin: 'admin',
  client: 'client',
  agent: 'agent'
};

exports.Poste = exports.$Enums.Poste = {
  directeur: 'directeur',
  secretaire: 'secretaire',
  caissier: 'caissier',
  gerant: 'gerant'
};

exports.MoyenPaiment = exports.$Enums.MoyenPaiment = {
  cache: 'cache',
  banque: 'banque',
  mobile: 'mobile',
  cheque: 'cheque',
  autres: 'autres'
};

exports.StatutVente = exports.$Enums.StatutVente = {
  EN_ATTENTE: 'EN_ATTENTE',
  CONFIRME: 'CONFIRME',
  REMBOURSE: 'REMBOURSE',
  ANNULE: 'ANNULE'
};

exports.TypeClient = exports.$Enums.TypeClient = {
  ordinaire: 'ordinaire',
  nouveau: 'nouveau',
  client: 'client',
  fournisseur: 'fournisseur',
  agent: 'agent'
};

exports.StatutAchat = exports.$Enums.StatutAchat = {
  EN_COURS: 'EN_COURS',
  TERMINE: 'TERMINE',
  ANNULE: 'ANNULE'
};

exports.StatutReservation = exports.$Enums.StatutReservation = {
  EN_ATTENTE: 'EN_ATTENTE',
  CONFIRMEE: 'CONFIRMEE',
  ANNULEE: 'ANNULEE',
  REJETEE: 'REJETEE',
  CONVERTIE: 'CONVERTIE'
};

exports.StatutCommande = exports.$Enums.StatutCommande = {
  EN_ATTENTE_PAIEMENT: 'EN_ATTENTE_PAIEMENT',
  PAIDEE: 'PAIDEE',
  EN_PREPARATION: 'EN_PREPARATION',
  EN_LIVRAISON: 'EN_LIVRAISON',
  LIVREE: 'LIVREE',
  ANNULEE: 'ANNULEE',
  REMBOURSEE: 'REMBOURSEE',
  ECHEC_PAIEMENT: 'ECHEC_PAIEMENT'
};

exports.StatutCaisse = exports.$Enums.StatutCaisse = {
  OUVERTE: 'OUVERTE',
  FERMEE: 'FERMEE',
  EN_ATTENTE: 'EN_ATTENTE'
};

exports.TypeMouvementCaisse = exports.$Enums.TypeMouvementCaisse = {
  ENTREE: 'ENTREE',
  SORTIE: 'SORTIE'
};

exports.CategorieMouvement = exports.$Enums.CategorieMouvement = {
  ACHAT: 'ACHAT',
  VENTE: 'VENTE',
  FOURNISSEUR: 'FOURNISSEUR',
  SALAIRE: 'SALAIRE',
  LOYER: 'LOYER',
  EMPRUNT: 'EMPRUNT',
  TAXE: 'TAXE',
  AUTRES: 'AUTRES'
};

exports.Prisma.ModelName = {
  Entreprise: 'Entreprise',
  Utilisateur: 'Utilisateur',
  Adresse: 'Adresse',
  Contact: 'Contact',
  Fournisseur: 'Fournisseur',
  Teneur: 'Teneur',
  Devise: 'Devise',
  Produit: 'Produit',
  Paiement: 'Paiement',
  Vente: 'Vente',
  Panier: 'Panier',
  DetailPanier: 'DetailPanier',
  Achat: 'Achat',
  Reservation: 'Reservation',
  Commande: 'Commande',
  Caisse: 'Caisse',
  MouvementCaisse: 'MouvementCaisse',
  ClotureCaisse: 'ClotureCaisse'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
